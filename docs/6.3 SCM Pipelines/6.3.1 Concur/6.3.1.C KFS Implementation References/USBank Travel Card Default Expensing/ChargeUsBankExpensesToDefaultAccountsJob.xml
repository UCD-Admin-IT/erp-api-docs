<!--
  #%L
  concur-batch-integration
  %%
  Copyright (C) 2015 - 2020 The Regents of the University of California, Davis campus
  %%
  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.

  3. Neither the name of the University of California nor the names of its contributors
     may be used to endorse or promote products derived from this software without
     specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
  #L%
  -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:batch="http://www.springframework.org/schema/batch"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:task="http://www.springframework.org/schema/task"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:integration="http://www.springframework.org/schema/integration"
  xmlns:int-file="http://www.springframework.org/schema/integration/file"
  xmlns:batch-int="http://www.springframework.org/schema/batch-integration"
  xsi:schemaLocation="
        http://www.springframework.org/schema/batch
        http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
        http://www.springframework.org/schema/integration
        http://www.springframework.org/schema/integration/spring-integration.xsd
        http://www.springframework.org/schema/batch-integration
      	http://www.springframework.org/schema/batch-integration/spring-batch-integration.xsd
        http://www.springframework.org/schema/integration/file
    	  http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/task
	    http://www.springframework.org/schema/task/spring-task.xsd"
>

  <import resource="classpath:edu/ucdavis/afs/integration/concur/job-common.xml" />

  <batch:job
    id="ChargeUsBankExpensesToDefaultAccountsJob"
    incrementer="jobParametersIncrementer"
    restartable="true"
  >
    <batch:description>
      Extracts charges from corporate cards, stores them to MongoDB and generates GLJV transactions
      to transfer the expenses from a central cash account out to department default accounts.
    </batch:description>
    <batch:listeners>
      <batch:listener ref="jobListener" />
      <batch:listener>
        <bean parent="jobLoggingListener" scope="job" />
      </batch:listener>  
    </batch:listeners>

    <batch:step id="abortIfOtherInstanceAlreadyRunning" next="importUsBankFile">
      <batch:description>
        Checks if this job is already running and immediately aborts it if so.
      </batch:description>
      <batch:tasklet>
        <bean parent="abortOnSimultaneousJobRuns" />
      </batch:tasklet>
    </batch:step>

    <batch:step id="importUsBankFile" next="encryptUsBankFile">
      <batch:description>
        Imports the provided US Bank file to extract card transactions which should
        be expensed to the ledger and reconciled by a report or reimbursed to the university
        by the traveller.
      </batch:description>
      <batch:tasklet>
        <batch:chunk
          reader="usBankFileItemReader"
          processor="usBankFileRecordProcessor"
          writer="mongoItemWriter"
          commit-interval="${default.batch.interval}"
        >
        </batch:chunk>
      </batch:tasklet>
      <batch:listeners>
        <batch:listener>
          <bean parent="progressLoggingListener" id="UsBankFileRead" />
        </batch:listener>
        <batch:listener ref="usBankRecordProcessor" />
      </batch:listeners>
    </batch:step>

    <batch:step id="encryptUsBankFile" next="applyDefaultAccounts">
      <batch:description>
        Takes the provided input file, encrypts it using the configured key to a processed directory, and destroys the original file.
      </batch:description>
      <batch:tasklet ref="encryptFileTasklet" />
      <batch:listeners>
        <batch:listener>
          <bean parent="progressLoggingListener" id="EncryptUsBankFile" />
        </batch:listener>
      </batch:listeners>
    </batch:step>

    <batch:step id="applyDefaultAccounts" next="generateJournal">
      <batch:description>
        Reads any records which still need extract and need to have their account assigned.
      </batch:description>
      <batch:tasklet>
        <batch:chunk
          reader="needsAccountItemReader"
          processor="applyDefaultAccountProcessor"
          writer="mongoItemWriter"
          commit-interval="${default.batch.interval}" />
      </batch:tasklet>
      <batch:listeners>
        <batch:listener>
          <bean parent="progressLoggingListener" id="ApplyDefaultAccounts" />
        </batch:listener>
      </batch:listeners>
    </batch:step>

    <batch:step id="generateJournal" next="renameFileStep">
      <batch:tasklet>
        <batch:chunk
          reader="readyToJournalItemReader"
          processor="createUsBankJournalLinesProcessor"
          writer="gljvLinesFileWriter"
          commit-interval="${default.batch.interval}" />
      </batch:tasklet>
      <batch:listeners>
        <batch:listener>
          <bean parent="progressLoggingListener" id="generateJournal" />
        </batch:listener>
        <batch:listener ref="GLJVSummaryGeneratorListener" />
      </batch:listeners>
    </batch:step>

    <batch:step id="renameFileStep" next="updateSyncInfoStep">
      <batch:tasklet ref="renameFileTasklet" />
    </batch:step>

    <batch:step id="updateSyncInfoStep" next="fileTransmitStep">
      <batch:tasklet ref="usBankFileRecordUpdateSyncInfoTasklet" />
    </batch:step>

    <batch:step id="fileTransmitStep">
      <batch:tasklet ref="fileTransmitScriptTasklet"/>
      <batch:listeners>
        <batch:listener>
          <bean parent="progressLoggingListener" id="TransmitGLJVFiles" />
        </batch:listener>
      </batch:listeners>
    </batch:step>

  </batch:job>

  <!-- File Polling Configuration (Spring Integration components to launch this batch job) -->

  <integration:channel id="usBankInboundFileChannel" />
  <integration:channel id="usBankOutboundJobRequestChannel" />
  <integration:channel id="usBankJobLaunchReplyChannel" />

  <int-file:inbound-channel-adapter
    id="usBankFilePoller"
    auto-create-directory="true"
    channel="usBankInboundFileChannel"
    directory="file:${usbank.receive.directory}"
    filename-pattern="*.txt"
  >
    <integration:poller max-messages-per-poll="${ChargeUsBankExpensesToDefaultAccountsJob.poller.maxMessagesPerPoll}"
                        fixed-rate="${ChargeUsBankExpensesToDefaultAccountsJob.poller.fixedRate}" />
  </int-file:inbound-channel-adapter>

  <integration:chain
    input-channel="usBankInboundFileChannel"
    output-channel="usBankOutboundJobRequestChannel"
  >
    <integration:service-activator>
      <bean class="org.springframework.batch.admin.integration.FileToJobLaunchRequestAdapter"
        p:job-ref="ChargeUsBankExpensesToDefaultAccountsJob" />
    </integration:service-activator>
  </integration:chain>

  <batch-int:job-launching-gateway
    request-channel="usBankOutboundJobRequestChannel"
    reply-channel="usBankJobLaunchReplyChannel" />

  <integration:logging-channel-adapter channel="usBankJobLaunchReplyChannel" />

  <!-- Listeners -->

  <bean
    id="jobListener"
    parent="incrementalBatchJobListener"
    p:mongoTemplate-ref="mongoTemplate"
    p:collection="usBankFileRecord"
    p:jobDestination="${ChargeUsBankExpensesToDefaultAccountsJob.export.destination}"
    p:emailOnJobSuccess="true"
    p:emailOnJobWarnings="true"
    p:toEmailAddresses="${email.toAddresses},${ChargeUsBankExpensesToDefaultAccountsJob.email.recipients}"
  />

  <!-- ********** Step 1 - Read from flat file *********************************************************** -->

  <bean id="tabDelimitedLineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
    p:quoteCharacter="\u0000"
    p:strict="false">
    <property name="delimiter">
      <util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_TAB" />
    </property>
  </bean>

  <bean id="headerRowTokenizer" parent="tabDelimitedLineTokenizer">
    <description>Tokenizes header row lines into their respective fields.</description>
    <property name="names">
      <list>
        <value>rowType</value>
        <value>companyId</value>
        <value>sequenceNumber</value>
        <value>processingDate</value>
        <value>recordTypeCode</value>
        <value>recordCount</value>
        <value>totalAmount</value>
        <value>loadFileFormat</value>
        <value>issuerIdentificationNumber</value>
        <value>processorIdentificationNumber</value>
        <value>regionId</value>
        <value>processorPlatform</value>
        <value>optional1</value>
        <value>optional2</value>
        <value>optional3</value>
        <value>optional4</value>
      </list>
    </property>
  </bean>

  <util:list id="cardAccountFieldNames">
    <description>Tokenizes card account record lines into their respective fields.</description>
    <value>rowType</value>
    <value>accountNumber</value>
    <value>accountNumber2</value>
    <value>hierarchyNode</value>
    <value>effectiveDate</value>
    <value>accountOpenDate</value>
    <value>accountCloseDate</value>
    <value>cardExpireDate</value>
    <value>cardType</value>
    <value>spendingLimit</value>
    <value>statementType</value>
    <value>lastRevisionDate</value>
    <value>transactionSpendingLimit</value>
    <value>corporationAccountIndicator</value>
    <value>billingAccountNumber</value>
    <value>defaultAccountCode</value>
    <value>defaultAccountCodeExtension</value>
    <value>transactionDailyLimit</value>
    <value>transactionCycleLimit</value>
    <value>cashLimitAmount</value>
    <value>cardStatusCode</value>
    <value>reasonStatusCode</value>
    <value>statusDate</value>
    <value>preFundedIndicator</value>
    <value>cityPairProgramIndicator</value>
    <value>taskOrderIndicator</value>
    <value>fleetServiceIndicator</value>
    <value>creditRating</value>
    <value>creditRatingDate</value>
    <value>annualFeeFlag</value>
    <value>annualFeeMonth</value>
    <value>cardReceiptVerificationFlag</value>
    <value>checkIndicator</value>
    <value>accountBillingTypeFlag</value>
    <value>lostDate</value>
    <value>chargeOffDate</value>
    <value>chargeOffAmount</value>
    <value>lostTransferAccountNumber</value>
    <value>callingCardPhoneType</value>
    <value>embossLine1</value>
    <value>embossLine2</value>
    <value>lastCreditLimitChangeDate</value>
    <value>lastMaintenanceDate</value>
    <value>optional1</value>
    <value>optional2</value>
    <value>optional3</value>
    <value>optional4</value>
  </util:list>

  <util:list id="cardHolderFieldNames">
    <description>Tokenizes card holder record lines into their respective fields.</description>
    <value>rowType</value>
    <value>companyId</value>
    <value>accountNumber</value>
    <value>hierarchyNode</value>
    <value>firstName</value>
    <value>lastName</value>
    <value>address1</value>
    <value>address2</value>
    <value>city</value>
    <value>stateCode</value>
    <value>countryCode</value>
    <value>postalCode</value>
    <value>address3</value>
    <value>departmentId</value>
    <value>phone</value>
    <value>faxNumber</value>
    <value>otherId</value>
    <value>trainingDate</value>
    <value>email</value>
    <value>authorizedUser1</value>
    <value>authorizedUser2</value>
    <value>authorizedUser3</value>
    <value>employeeId</value>
    <value>homePhone</value>
    <value>middleName</value>
    <value>commerceBuyerId</value>
    <value>vehicleId</value>
    <value>misc1</value>
    <value>misc1Desc</value>
    <value>misc2</value>
    <value>misc2Desc</value>
    <value>optional1</value>
    <value>optional2</value>
    <value>optional3</value>
    <value>optional4</value>
  </util:list>

  <util:list id="cardTransactionFieldNames">
    <description>Tokenizes card transaction record lines into their respective fields.</description>
    <value>rowType</value>
    <value>accountNumber</value>
    <value>postingDate</value>
    <value>referenceNumber</value>
    <value>sequenceNumber</value>
    <value>period</value>
    <value>aquiringBin</value>
    <value>cardAcceptorId</value>
    <value>supplierName</value>
    <value>supplierCity</value>
    <value>supplierStateCode</value>
    <value>supplierCountryCode</value>
    <value>supplierPostalCode</value>
    <value>sourceAmount</value>
    <value>billingAmount</value>
    <value>sourceCurrencyCode</value>
    <value>merchantCategoryCode</value>
    <value>transactionTypeCode</value>
    <value>transactionDate</value>
    <value>billingCurrencyCode</value>
    <value>taxAmount</value>
    <value>disputeAmount</value>
    <value>disputeReasonCode</value>
    <value>disputeDate</value>
    <value>transactionCode</value>
    <value>supplierVATNumber</value>
    <value>supplierOrderNumber</value>
    <value>customerVATNumber</value>
    <value>vatAmount</value>
    <value>tax2Amount</value>
    <value>purchaseIdentificationFormat</value>
    <value>customerCode</value>
    <value>purchaseIdentificationDescription</value>
    <value>transactionTime</value>
    <value>taxIncludedCode</value>
    <value>tax2IncludedCode</value>
    <value>orderTypeCode</value>
    <value>messageIdentifier</value>
    <value>processorAddendumKey</value>
    <value>mpsId</value>
    <value>usageCode</value>
    <value>enrichedTransactionFlag</value>
    <value>managingAccountNumber</value>
    <value>ddaNumber</value>
    <value>ddaSavingsNumber</value>
    <value>disputeStatusCode</value>
    <value>matchedIndicator</value>
    <value>routingNumber</value>
    <value>authorizationNumber</value>
    <value>cardholderTransactionApproval</value>
    <value>extractId</value>
    <value>memoPostFlag</value>
    <value>statementDate</value>
    <value>userData1</value>
    <value>userData1Desc</value>
    <value>userData2</value>
    <value>userData2Desc</value>
    <value>userData3</value>
    <value>userData3Desc</value>
    <value>userData4</value>
    <value>userData4Desc</value>
    <value>userData5</value>
    <value>userData5Desc</value>
    <value>exchangeRate</value>
    <value>cpiDate</value>
    <value>lineMatchedIndicator</value>
    <value>issuerUsageCode</value>
    <value>source</value>
    <value>optional1</value>
    <value>optional2</value>
    <value>optional3</value>
    <value>optional4</value>
    <value>reserved1</value>
    <value>reserved2</value>
    <value>mccGroup</value>
    <value>mccDescription</value>
  </util:list>

  <bean id="headerObjectMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
    p:targetType="edu.ucdavis.afs.integration.concur.usbank.dto.UsBankFileHeaderRow"
    p:strict="false">
    <description>Maps FieldSets with named properties into the header row DTO objects.</description>
  </bean>

  <bean id="cardAccountObjectMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
    p:targetType="edu.ucdavis.afs.integration.concur.usbank.dto.UsBankCardAccountRecord"
    p:strict="false">
    <description>Maps FieldSets with named properties into the card account DTO objects.</description>
  </bean>

  <bean id="cardHolderObjectMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
    p:targetType="edu.ucdavis.afs.integration.concur.usbank.dto.UsBankCardHolderRecord"
    p:strict="false">
    <description>Maps FieldSets with named properties into the card holder DTO objects.</description>
  </bean>

  <bean id="cardTransactionObjectMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
    p:targetType="edu.ucdavis.afs.integration.concur.usbank.dto.UsBankCardTransactionRecord"
    p:strict="false">
    <description>Maps FieldSets with named properties into the card transaction DTO objects.</description>
  </bean>

  <bean id="detailRowFieldSetMapper" class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper">
    <description>Detail rows need to be processed differently, so we pass the indexed FieldSet of data directly through to the processor.</description>
  </bean>

  <bean id="usBankFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"
    scope="job"
    p:resource="#{jobParameters['input.file']}"
  >
    <description>Reads and tokenizes lines from the file.  Detail lines are left as tokenized arrays to be handled by the processor.</description>
    <property name="lineMapper">
      <bean class="org.springframework.batch.item.file.mapping.PatternMatchingCompositeLineMapper">
        <property name="tokenizers">
          <map>
            <!-- all records are tab delimited - see the UsBankRowType enum for meanings of these values -->
            <entry key="6*" value-ref="headerRowTokenizer" />
            <entry key="7*" value-ref="headerRowTokenizer" />
            <entry key="8*" value-ref="headerRowTokenizer" />
            <entry key="9*" value-ref="headerRowTokenizer" />
            <entry key="4*"  value-ref="tabDelimitedLineTokenizer" />
          </map>
        </property>
        <property name="fieldSetMappers">
          <map>
            <entry key="6*" value-ref="headerObjectMapper" />
            <entry key="7*" value-ref="headerObjectMapper" />
            <entry key="8*" value-ref="headerObjectMapper" />
            <entry key="9*" value-ref="headerObjectMapper" />
            <entry key="4*"  value-ref="detailRowFieldSetMapper" />
          </map>
        </property>
      </bean>
    </property>
  </bean>

  <bean id="usBankFileRecordProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
    <description>First process the data into the correct record type.  Then compare with existing data to ensure no duplicates loaded.</description>
    <property name="delegates">
      <list>
        <ref bean="usBankRecordProcessor" />
        <ref bean="usBankFileRecordComparisonProcessor" />
      </list>
    </property>
  </bean>

  <bean id="usBankRecordProcessor" class="edu.ucdavis.afs.integration.concur.usbank.UsBankRecordProcessor"
    p:cardAccountFields-ref="cardAccountFieldNames"
    p:cardHolderFields-ref="cardHolderFieldNames"
    p:cardTransactionFields-ref="cardTransactionFieldNames"
    p:cardAccountObjectMapper-ref="cardAccountObjectMapper"
    p:cardHolderObjectMapper-ref="cardHolderObjectMapper"
    p:cardTransactionObjectMapper-ref="cardTransactionObjectMapper"
  >
    <description>Converts incoming parsed records from the US Bank file into UsBankFileRecord objects to be stored to MongoDB.</description>
  </bean>

  <bean id="usBankFileRecordComparisonProcessor" class="edu.ucdavis.afs.integration.base.processor.ComparisonItemProcessor"
    scope="job"
    p:mongoTemplate-ref="mongoTemplate"
    p:destinationName="#{jobExecutionContext['job.destination']}"
    p:skipFurtherProcessingWhenUnchanged="true"
  >
    <description>Used to skip re-saving of records which were previously imported.</description>
    <constructor-arg>
      <value>edu.ucdavis.afs.integration.concur.usbank.dto.UsBankFileRecord</value>
    </constructor-arg>
  </bean>

  <!-- ********** Step 2 Beans - Encrypt file *********************************************************** -->

  <!-- Using the same key here so that we don't need to configure a second one. -->
  <bean
    id="encryptFileTasklet"
    class="edu.ucdavis.afs.integration.base.file.EncryptFileTasklet"
    scope="job"
    p:key="${ConcurSaeImportJob.encryptKey}"
    p:inputFile="#{jobParameters['input.file']}"
    p:outputFileDirectory="${usbank.processed.directory}">
    <description>Takes the provided input file, encrypts it using the configured key to a processed directory, and destroys the original file.</description>
  </bean>

  <!-- ********** Step 3 Beans - applyDefaultAccounts *********************************************************** -->

  <bean id="needsAccountItemReader" parent="mongoItemReader" scope="job">
    <description>Pull in records which still need to be extracted to KFS and which do not have a an account set.</description>
    <property name="targetType" value="edu.ucdavis.afs.integration.concur.usbank.dto.UsBankFileRecord" />
    <property name="query">
      <value><![CDATA[{
        'syncInfo.destinations.#{jobExecutionContext['job.destination']}.needsExtract': true,
        departmentalChartAccount: null
      }]]>
      </value>
    </property>
  </bean>

  <bean id="applyDefaultAccountProcessor" class="edu.ucdavis.afs.integration.concur.usbank.ApplyConcurDataProcessor"
    p:concurDao-ref="concurDao"
    p:kfsDao-ref="kfsDao"
    p:mongoTemplate-ref="mongoTemplate"
    p:expenseDefaultChartAccount="${cbcp.expense.default.chart.account}"
    p:useDepartmentDefaultAccount="${ChargeUsBankExpensesToDefaultAccountsJob.useDepartmentDefaultAccount}"
  >
    <description>Applies an account from either the corporate card data in concur, the department level account in taDepartments or a default central account.</description>
  </bean>

  <!-- ********** Step 4 Beans - generateJournal *********************************************************** -->

  <bean id="readyToJournalItemReader" parent="mongoItemReader" scope="job">
    <description>Pull in records which still need to be extracted to KFS and have an account set.</description>
    <property name="targetType" value="edu.ucdavis.afs.integration.concur.usbank.dto.UsBankFileRecord" />
    <property name="query">
      <value><![CDATA[{
        'syncInfo.destinations.#{jobExecutionContext['job.destination']}.needsExtract': true,
        departmentalChartAccount: { $nin: [ null, "" ] },
        error: false
      }]]>
      </value>
    </property>
  </bean>

  <bean id="createUsBankJournalLinesProcessor"
        class="edu.ucdavis.afs.integration.concur.usbank.UsBankRecordToGljvProcessor"
        scope="step"
        p:kfsDao-ref="kfsDao"
        p:dateTimeService-ref="dateTimeService"
        p:originCode="${CTSAgencyPaymentJob.gjlv.origin.code}"
        p:disbursementAccountChartCode="${cbcp.disbursement.account.chart}"
        p:disbursementAccountNumber="${cbcp.disbursement.account}"
        p:cashObjectCode="${cbcp.cash.object.code}"
        p:departmentObjectCode="${cbcp.expense.object.code}"
    >
    <description>Converts UsBankFileRecord objects into pairs of GLJVLine Entries to transfer expenses to department accounts.</description>
  </bean>

  <bean id="gljvLinesFileWriter" class="edu.ucdavis.afs.integration.base.writer.ItemListWriterWrapper">
    <description>Translation step to take the lists of GLJVLine items and send them to the real writer one at a time.</description>
    <property name="delegate" ref="gljvLineFileWriter" />
  </bean>

  <bean id="gljvLineFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
    <description>Write the GLJV lines to the temp file.</description>
    <property name="resource" value="file:${temp.output.directory}/#{jobExecutionContext['job.name']}.txt" />
    <property name="shouldDeleteIfExists" value="true" />
    <property name="shouldDeleteIfEmpty" value="true" />

    <property name="lineAggregator">
      <bean class="edu.ucdavis.afs.integration.concur.usbank.GLJVLineAggregator" />
    </property>
  </bean>

  <bean id="GLJVSummaryGeneratorListener" class="edu.ucdavis.afs.integration.concur.usbank.GLJVSummaryGeneratorListener" scope="step">
    <description>Extracts data from the lines being written to the file to build a summary for the email report.</description>
  </bean>

  <bean id="usBankFileRecordUpdateSyncInfoTasklet" class="edu.ucdavis.afs.integration.data.UpdateSyncInfoTasklet" scope="step">
    <description>Marks the records included in the GLJV file as sent.</description>
    <property name="template" ref="mongoTemplate"/>
    <property name="destinationName" value="#{jobExecutionContext['job.destination']}"/>
    <property name="mongoCollections" value="#{jobExecutionContext['job.collections']}"/>
    <property name="altQuery">
      <value><![CDATA[{
        'syncInfo.destinations.#{jobExecutionContext['job.destination']}.needsExtract': true,
        departmentalChartAccount: { $nin: [ null, "" ] },
        error: false
      }]]>
      </value>
    </property>
  </bean>

  <bean id="renameFileTasklet"
    class="edu.ucdavis.afs.integration.concur.cts.gljv.GLJVRenameFileTasklet"
    scope="step"
    p:gljvOriginCode="${CTSAgencyPaymentJob.gjlv.origin.code}"
    p:tempFilePath="${temp.output.directory}/#{jobExecutionContext['job.name']}.txt"
    p:transmitFileDirectory="${gljv.transmit.directory}">
    <description>Moves the completed file from the temp directory to the final diresctory.</description>
  </bean>

  <bean name="fileTransmitScriptTasklet" parent="shellExecutionTasklet" scope="step">
    <property name="commands">
      <list>
        <value>${ChargeUsBankExpensesToDefaultAccountsJob.transmitScriptCommand} ${instance.id} #{jobExecutionContext['job.name']} ${gljv.transmit.directory}</value>
      </list>
    </property>
  </bean>

</beans>

